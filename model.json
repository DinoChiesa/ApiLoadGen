{
  "type" : "job",
  "uuid" : "14D0EED8-5A09-44C2-B71A-0C5C46497580",
  "name": "job1",
  "description": "A simple load test to login to App Services, and perform some queries and updates",
  "defaultProperties": {
    "scheme": "https",
    "host": "cheeso-test.apigee.net",
    "headers" : {
      "Accept" : "application/json"
    }
  },

  "loadprofiles" : [{ 
    "type" : "loadprofile", 
    "name" : "loadprofile1", 
    "perHourCounts" : [
      44, 35, 40, 36, 27, 40, 40, 54, 
      57, 62, 54, 61, 73, 70, 53, 50, 
      47, 62, 74, 88, 83, 77, 70, 51
    ] 
  }], 

  "sequences" : [
    {
      "type" : "sequence",
      "description" : "login",
      "name" : "seqLogin",
      "iterations" : 1,
      "requests" : [ {
        "type" : "request",
        "name": "login",
        "pathSuffix" : "/v1/todolist/token",
        "method" : "post",
        "headers" : {
          "content-type" : "application/json"
        },
        "payload" : {
          "grant_type":"password",
          "username":"{username}",
          "password":"{password}"
        }, 
        "delayBefore" : 0,
        "extracts" : [{
          "description" : "extract the access token",
          "fn" : "function(obj) {return obj.access_token;}",
          "valueRef" : "oauth_bearer_token"
        }]
      }]
    },

    {
      "type" : "sequence",
      "name" : "seqQueryAndUpdate1",
      "description" : "query all items then get one item at random, and do two updates",
      "iterations" : "Math.floor(Math.random() * 3 + 2)",
      "delayBetweenIterations" : 100,
      "requests" : [ 
        {
          "type" : "request",
          "name" : "retrieveItems",
          "pathSuffix" : "/v1/todolist/users/me/owns/items",
          "method" : "get",
          "headers" : {
            "authorization" : "Bearer {oauth_bearer_token}"
          }, 
          "delayBefore" : 0,
          "extracts" : [{
            "description" : "extract the uuids of the returned entities",
            "fn" : "function(obj) {var i,a=[]; for(i=0;i<obj.entities.length;i++){a.push(obj.entities[i].uuid);} return a;}",
            "valueRef" : "uuids"
          }]
        },
        {
          "type" : "request",
          "name" : "retrieveRandomItem",
          "description" : "retrieve one item, at random",
          "pathSuffix" : "/v1/todolist/users/me/owns/items/{uuids[Math.floor(Math.random() * uuids.length)]}",
          "method" : "get",
          "headers" : {
            "authorization" : "Bearer {oauth_bearer_token}"
          }, 
          "delayBefore" : 40
        },
        {
          "type" : "request",
          "name" : "updateRandomItem1",
          "description" : "update one item, PUTing a random string into a property",
          "pathSuffix" : "/v1/todolist/users/me/owns/items/{uuids[Math.floor(Math.random() * uuids.length)]}",
          "method" : "put",
          "headers" : {
            "authorization" : "Bearer {oauth_bearer_token}"
          },
          "delayBefore" : 40, 
          "payload" : {
            "updatedProperty" : "{'updated: ' + (new Date()).toString()}"
          }
        },
        {
          "type" : "request",
          "name" : "updateRandomItem2",
          "description" : "update one item with a complex value for a property",
          "pathSuffix" : "/v1/todolist/users/me/owns/items/{uuids[Math.floor(Math.random() * uuids.length)]}",
          "method" : "put",
          "delayBefore" : 40, 
          "headers" : {
            "authorization" : "Bearer {oauth_bearer_token}"
          },
          "payload" : {
            "updatedNestedObject" : {
              "lastUpdate" : "{'updated: ' + (new Date()).toString()}",
              "number" : "{Math.floor(Math.random() * 72)}"
            }
          }
        }
      ]
    }
  ]
}
